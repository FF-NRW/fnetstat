#!/bin/sh
# Netmon Nodewatcher (C) 2010-2011 Freifunk Oldenburg
# Update from Wermelskirchen by RubenKelevra 2012-2015 - <ruben@freifunk-nrw.de>
# Lizenz: GPL / AGPL 3.0

OLDIFS=$IFS
IFS='\n'

_loadavg_from_start=$(cat /proc/loadavg)
_stat_from_start=$(cat /proc/stat)

source /usr/lib/libfnetstat/fnetstat_main_def || exit 1
source "$FunctionFn" || exit 1

### old stuff ###
OLDIFS=$IFS
IFS='\n'
#fetch untouched stats at first:
cpuusage1=$(cat /proc/stat)
sleep 10
cpuusage2=$(cat /proc/stat)

#reduce stats
softirqs1=$(echo $cpuusage1 | grep "softirq" | tr ' ' '=')
softirqs2=$(echo $cpuusage2 | grep "softirq" | tr ' ' '=')
cpuusage1=$(echo $cpuusage1 | grep ^cpu | grep -v "^cpu " | tr ' ' '=')
cpuusage2=$(echo $cpuusage2 | grep ^cpu | grep -v "^cpu " | tr ' ' '=')
### / old stuff ###

cur_stat_fn=$(gen_cur_stat_fn)

set_print_to_file "$cur_stat_fn"

print_stat_header                 
print_hostname "as json"
print_bootid "as json"
print_wan_ip4 "as json"
print_wan_ip6 "as json"
print_pingcheck_wan_ip4 "as json"
print_pingcheck_wan_ip6 "as json"
print_uptime "as json"
print_time "as json"
print_idletime "as json"
print_meminfo "as json"
print_processes_running "as json"
print_loadavg "as json"
print_cpuinfo "as json"




echo "\"sys:softirqs\": {"
#softirqs fetched for 10 seconds, output avg/sec
OLDIFS=$IFS
IFS='\n'

output=$(expr $(echo $softirqs2 | cut -d '=' -f 3) - $(echo $softirqs1 | cut -d '=' -f 3))
output=$(awk "BEGIN {printf \"%.2f\",$output/10}")
echo "    \"HI\": $output,"
output=$(expr $(echo $softirqs2 | cut -d '=' -f 4) - $(echo $softirqs1 | cut -d '=' -f 4))
output=$(awk "BEGIN {printf \"%.2f\",$output/10}")
echo "    \"TIMER\": $output,"
output=$(expr $(echo $softirqs2 | cut -d '=' -f 5) - $(echo $softirqs1 | cut -d '=' -f 5))
output=$(awk "BEGIN {printf \"%.2f\",$output/10}")
echo "    \"NET_TX\": $output,"
output=$(expr $(echo $softirqs2 | cut -d '=' -f 6) - $(echo $softirqs1 | cut -d '=' -f 6))
output=$(awk "BEGIN {printf \"%.2f\",$output/10}")
echo "    \"NET_RX\": $output,"
output=$(expr $(echo $softirqs2 | cut -d '=' -f 7) - $(echo $softirqs1 | cut -d '=' -f 7))
output=$(awk "BEGIN {printf \"%.2f\",$output/10}")
echo "    \"BLOCK\": $output,"
output=$(expr $(echo $softirqs2 | cut -d '=' -f 8) - $(echo $softirqs1 | cut -d '=' -f 8))
output=$(awk "BEGIN {printf \"%.2f\",$output/10}")
echo "    \"BLOCK_IOPOLL\": $output,"
output=$(expr $(echo $softirqs2 | cut -d '=' -f 9) - $(echo $softirqs1 | cut -d '=' -f 9))
output=$(awk "BEGIN {printf \"%.2f\",$output/10}")
echo "    \"TASKLET\": $output,"
output=$(expr $(echo $softirqs2 | cut -d '=' -f 10) - $(echo $softirqs1 | cut -d '=' -f 10))
output=$(awk "BEGIN {printf \"%.2f\",$output/10}")
echo "    \"SCHED\": $output,"
output=$(expr $(echo $softirqs2 | cut -d '=' -f 11) - $(echo $softirqs1 | cut -d '=' -f 11))
output=$(awk "BEGIN {printf \"%.2f\",$output/10}")
echo "    \"HRTIMER\": $output,"
output=$(expr $(echo $softirqs2 | cut -d '=' -f 12) - $(echo $softirqs1 | cut -d '=' -f 12))
output=$(awk "BEGIN {printf \"%.2f\",$output/10}")
echo "    \"RCU\": $output"

echo "  }"

IFS=$OLDIFS

unset cpu user nice system idle iowait irq sirq OLDIFS b

echo "\"traffic\": ["
IFACES=`cat /proc/net/dev | awk -F: '!/\|/ { gsub(/[[:space:]]*/, "", $1); split($2, a, " "); printf("%s=%s=%s=%s ", $1, a[1], a[9], a[4]) }'`

b="0"
for entry in $IFACES; do
    if [ $b -eq "1" ]; then
        echo ","
    else
        b="1"
    fi
    
    echo -en "  {"
    output=`echo $entry | cut -d '=' -f 1`
    echo " \"interface\": \"$output\","
    output=`echo $entry | cut -d '=' -f 2`
    echo "    \"rx\": $output,"
    output=`echo $entry | cut -d '=' -f 3`
    echo "    \"tx\": $output,"
    output=`echo $entry | cut -d '=' -f 4`
    echo "    \"drop\": $output"
    echo -en "  }"
done

if [ $b -eq "1" ]; then
    echo ""
fi

echo "  ],"

unset b entry

#B.A.T.M.A.N. advanced
if which batctl >/dev/null; then
    if [ "$(batctl o | grep 'No batman nodes in range')" == "" ]; then
        OLDIFS=$IFS
        IFS="
"
        
        BAT_O_WIFI=`batctl o | awk '/O/ {next} /B/ {next} {print}'  | grep -E "$ADHOC_WIFI"`
        echo "\"batman:wifi:originators\": ["
        b="0"
        
        for row in $BAT_O_WIFI; do
            originator=`echo $row | awk '{print $1}'`
            next_hop=`echo $row | awk '{print $4}'`
            last_seen=`echo $row | awk '{print $2}'`
            last_seen="${last_seen//s/}"
            link_quality=`echo $row | awk '{print $3}'`
            link_quality="${link_quality//(/}"
            link_quality="${link_quality//)/}"
            
            if [ "$next_hop" == "$originator" ]; then
                if [ $b -eq "1" ]; then
                    echo ","
                else
                    b="1"
                fi
                echo -en "  {"
                echo " \"originator\": \"$originator\","
                echo "    \"last_seen\": \"$last_seen\","
                echo "    \"linkquality\": \"$link_quality\","
                echo -en "  }"
            fi
        done
        unset BAT_O_WIFI
        
        if [ $b -eq "1" ]; then
            echo ""
        fi

        echo "  ],"
        
        BAT_O_ETH=`batctl o | awk '/O/ {next} /B/ {next} {print}' | grep -E "$ADHOC_ETH"`
        echo "\"batman:eth:originators\": ["
        b="0"
        
        for row in $BAT_O_ETH; do
            originator=`echo $row | awk '{print $1}'`
            next_hop=`echo $row | awk '{print $4}'`
            last_seen=`echo $row | awk '{print $2}'`
            last_seen="${last_seen//s/}"
            link_quality=`echo $row | awk '{print $3}'`
            link_quality="${link_quality//(/}"
            link_quality="${link_quality//)/}"
            
            if [ "$next_hop" == "$originator" ]; then
                if [ $b -eq "1" ]; then
                    echo ","
                else
                    b="1"
                fi
                echo -en "  {"
                echo " \"originator\": \"$originator\","
                echo "    \"last_seen\": \"$last_seen\","
                echo "    \"linkquality\": \"$link_quality\","
                echo -en "  }"
            fi
        done
        unset BAT_O_ETH
        
        if [ $b -eq "1" ]; then
            echo ""
        fi

        echo "  ],"
        
        IFS=$OLDIFS
    fi
    
    unset OLDIFS originator last_seen link_quality
    
    #batman-adv statistics
    BATISTICS=`batctl s | awk '{ print $2 }'`
    echo "\"batman:statistics\": {"

    i=0
    for row in $BATISTICS; do    
        if [ $i == "0" ]; then        
            echo "  \"tx\": \"$row\","
        elif [ $i == 1 ]; then
            echo "  \"tx_bytes\": $row,"
        elif [ $i == 2 ]; then
            echo "  \"tx_dropped\": $row,"
        elif [ $i == 3 ]; then
            echo "  \"rx\": $row,"
        elif [ $i == 4 ]; then
            echo "  \"rx_bytes\": $row,"
        elif [ $i == 5 ]; then
            echo "  \"forward\": $row,"
        elif [ $i == 6 ]; then
            echo "  \"forward_bytes\": $row,"
        elif [ $i == 7 ]; then
            echo "  \"mgmt_tx\": $row,"
        elif [ $i == 8 ]; then
            echo "  \"mgmt_tx_bytes\": $row,"
        elif [ $i == 9 ]; then
            echo "  \"mgmt_rx\": $row,"
        elif [ $i == 10 ]; then
            echo "  \"mgmt_rx_bytes\": $row"
        elif [ $i == 11 ]; then
            break
        fi
        
        i=$(($i + 1))
    done
    echo "  },"
    unset row BATISTICS
fi

if which $BRCTL >/dev/null; then

    #CLIENTS
    SEDDEV=`$BRCTL showstp $MESH_BR | egrep '\([0-9]\)' | sed -e "s/(//;s/)//" | awk '{ print "s/^  "$2"/"$1"/;" }'`
        
    CLIENT_MACS=$CLIENT_MACS`$BRCTL showmacs $MESH_BR | sed -e "$SEDDEV" | awk '{if ($3 != "yes" && $1 == "'"$entry"'") print $2}'`" "

                        
    output=0
    for client in $CLIENT_MACS; do
        output=`expr $i + 1`
    done
    unset CLIENT_MACS SEDDEV
    echo "\"ap:clients\": $output"

else
    echo "\"ap:clients\": -1"
fi

echo "}"

echo "_BootID=$_BootID" > "$VAR_FILE"


IFS=$OLDIFS